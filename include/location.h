/*
    File:    location.h
    Created: 13 December 2015г. в 09:05 (по Москве)
    Author:  Гаврилов Владимир Сергеевич
    E-mails: vladimir.s.gavrilov@gmail.com
             gavrilov.vladimir.s@mail.ru
             gavvs1977@yandex.ru
*/

#ifndef LOCATION_H
#define LOCATION_H

#include <memory>
/* Следующая структура описывает текущее положение в обрабатываемом тексте.
 * Связано это с тем, что, из--за конфликта лексемы 'идентификатор' и лексемы
 * 'символ', вместо одного сканера нужно сделать два: основной сканер и
 * сканер для регулярных выражений. При этом основной парсер будет вызывать
 * парсеры для регулярных выражений, которые, в свой черёд, будут вызывать
 * сканер для регулярных выражений. Поэтому обоим данным сканерам нужно
 * знать текущее положение в текущем тексте и уметь манипулировать этим
 * положением, причём каждый из этих сканеров должен продолжать работу
 * с того места в обрабатываемом тексте, на котором завершил работу
 * предыдущий сканер. Как следствие, сведения о текущем положении в
 * обрабатываемом тексте должны разделяться обоими сканерами, ввиду чего в
 * конструктор каждого из сканеров нужно передавать умный указатель на
 * разделяемые сведения о текущем местоположении. */

// #include <cstddef>
struct Location {
    char32_t* pcurrent_char; /* указатель на текущий символ */
    size_t    current_line; /* номер текущей строки обрабатываемого текста */

    Location() : pcurrent_char(nullptr), current_line(1) {};
    Location(char32_t* txt) : pcurrent_char(txt), current_line(1) {};
};

using Location_ptr = std::shared_ptr<Location>;
#endif